name: 🌤️ Fetch and Save METARs (Every 10 Minutes)

on:
  schedule:
    - cron: "*/10 * * * *"     # Run every 10 minutes (UTC)
  workflow_dispatch:            # Allow manual trigger from GitHub UI

permissions:
  contents: write               # allow pushing to repo
  issues: write                 # allow posting notifications as issue comments

concurrency:
  group: metar-scheduler
  cancel-in-progress: true

jobs:
  fetch:
    name: 📡 Fetch and Archive METAR Data
    runs-on: ubuntu-latest

    # Use rocker image (R + tidyverse + httr/jsonlite/lubridate preinstalled)
    container:
      image: rocker/tidyverse:4.3.3

    env:
      CHECKWX_API_KEY: ${{ secrets.CHECKWX_API_KEY }}
      MENTION_USER: "NoahCornish"
      NOTIFY_ISSUE_TITLE: "📣 METAR Run Notifications"

    steps:
      # ------------------------------------------------------------
      - name: 🛎️ Step 1 – Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # ------------------------------------------------------------
      - name: 📦 Step 2 – Ensure R packages available
        run: |
          Rscript -e 'pkgs <- c("httr","jsonlite","tibble","dplyr","lubridate");
                      missing <- pkgs[!pkgs %in% rownames(installed.packages())];
                      if(length(missing)) install.packages(missing, repos="https://cloud.r-project.org", quiet=TRUE)'

      # ------------------------------------------------------------
      - name: 📝 Step 3 – Run METAR fetch + save script
        run: Rscript metar_fetch.R

      # ------------------------------------------------------------
      - name: 💾 Step 4 – Commit and push updated data files
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Stage monster file, monthly archives, and logs
          git add saved_METARs.csv metars_*.csv metar_log.txt || true

          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Update METARs $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git push
          else
            echo "No changes to commit."
          fi

      # ------------------------------------------------------------
      - name: ⏱️ Step 5 – Capture current timestamp (EDT/EST)
        id: ts
        if: always()
        run: |
          # Convert to America/Toronto timezone for logs
          echo "now=$(TZ=America/Toronto date '+%Y-%m-%d %H:%M:%S %Z')" >> "$GITHUB_OUTPUT"

      # ------------------------------------------------------------
      - name: 🔔 Step 6 – Post run status as GitHub issue comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const title = process.env.NOTIFY_ISSUE_TITLE;
            const mention = process.env.MENTION_USER;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            // Find or create notification thread
            const { data: issues } = await github.rest.issues.listForRepo({
              owner, repo, state: "open", per_page: 100
            });
            let thread = issues.find(i => i.title === title);
            if (!thread) {
              const created = await github.rest.issues.create({
                owner, repo, title,
                body: "This thread will log every METAR workflow run."
              });
              thread = created.data;
            }

            const status = "${{ job.status }}";
            const runUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const when = "${{ steps.ts.outputs.now }}";

            const body = [
              `@${mention} **METAR job ${status.toUpperCase()}**`,
              `• Repo: ${{ github.repository }}`,
              `• Branch: ${{ github.ref_name }}`,
              `• Time (Local EDT/EST): ${when}`,
              `• CSV Updated: saved_METARs.csv`,
              ``,
              `[🔗 View run logs](${runUrl})`
            ].join("\n");

            await github.rest.issues.createComment({
              owner, repo, issue_number: thread.number, body
            });
